{"version":3,"sources":["components/Menu.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","react_default","a","createElement","className","href","onClick","handleStatsClick","handleStoreClick","Header","handleMenuClick","components_Menu","menuClosed","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","storeData","statsData","currentView","bind","assertThisInitialized","clearView","setState","menu","document","querySelector","style","height","opacity","getElementById","innerHTML","_this2","fetch","then","response","json","data","console","log","dataDone","items","map","item","images","transparent","rarity","src","name","cost","_this3","prevState","concat","toConsumableArray","components_Header","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5645ad87.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Menu(props){\r\n    return (\r\n        <ul className=\"menu-container\">\r\n            <a href=\"#\" onClick={props.handleStatsClick} className=\"menu-item\"><li>Stats</li></a>\r\n            <a href=\"#\" onClick={props.handleStoreClick} className=\"menu-item\"><li>Store</li></a>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from \"react\"\r\nimport Menu from \"./Menu\"\r\n\r\n\r\nfunction Header(props){    \r\n    return (\r\n        \r\n        <header className=\"header\">\r\n            <h1 className=\"app-title\">Fort-mike</h1>\r\n            <button onClick={props.handleMenuClick} className=\"menu-button\">&#9776;</button>\r\n\r\n            <Menu \r\n            handleStoreClick={props.handleStoreClick}\r\n            handleStatsClick={props.handleStatsClick}\r\n            menuClosed={props.menuClosed}\r\n             />\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      storeData: [],\n      statsData: [],\n      currentView: \"home\",\n      menuClosed: true\n    }\n\n    this.handleStoreClick = this.handleStoreClick.bind(this)\n    this.handleStatsClick = this.handleStatsClick.bind(this)\n    this.handleMenuClick = this.handleMenuClick.bind(this)\n    this.clearView = this.clearView.bind(this)\n  }\n\n  handleMenuClick(){\n    this.setState({\n      menuClosed: !this.state.menuClosed\n    })\n    const menu = document.querySelector(\".menu-container\")\n    if (this.state.menuClosed){\n        menu.style.height = \"150px\"\n        menu.style.opacity = \"1\"\n    } else {\n        menu.style.height = \"0px\"\n        menu.style.opacity = \"0\"\n    }\n  }\n\n  clearView(){\n    document.getElementById(\"view-container\").innerHTML = \"\"\n  }\n    \n  handleStoreClick(){\n    this.clearView()\n    fetch(\"https://fortnite-public-api.theapinetwork.com/prod09/store/get\")\n    .then(function(response){\n      return response.json()\n    }).then(data => {\n      \n      console.log(data)\n  \n      const dataDone = data.items.map(item => {\n        return (\n            <a href={item.item.images.transparent} className={`item-card ` + item.item.rarity}>\n              <img className=\"trans-img\" src={item.item.images.transparent} />\n              <h1 className=\"card-title\">{item.name}</h1>\n              <div className=\"cost-container\">\n                \n                <img className=\"currency\" src=\"https://fortnite-public-files.theapinetwork.com/fortnite-vbucks-icon.png\" />\n                <p className=\"cost\">{item.cost}</p>\n              </div>\n            </a>\n        )\n      })\n\n      this.setState({\n        storeData: dataDone,\n        currentView: \"store\",\n        menuClosed: !this.state.menuClosed\n      })\n    })\n    this.handleMenuClick()\n  }\n\n  handleStatsClick(){\n    fetch(\"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats_v2?user_id=565eb4ecef6a4fd6b41881a90da5eb64\")\n    .then(function(response){\n      return response.json()\n    }).then(data => {\n      \n      console.log(data)\n\n\n      this.setState(prevState => {\n         return {\n           statsData: [...prevState.statsData, data],\n           currentView: \"stats\",\n           menuClosed: !this.state.menuClosed\n         }        \n      })     \n    })\n    this.handleMenuClick()\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n          handleStoreClick={this.handleStoreClick}\n          handleStatsClick={this.handleStatsClick}\n          handleMenuClick={this.handleMenuClick}\n          menuClosed={this.state.menuClosed}\n        />\n        <div id=\"view-container\" className=\"view-container\">\n          {this.state.currentView == \"store\" && this.state.storeData}\n          {/* {this.state.currentView == \"stats\" && this.state.statsData} */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}